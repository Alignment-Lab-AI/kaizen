[
  {
    "topic": "Security",
    "comment": "Hardcoding API keys in `config.json` can lead to security vulnerabilities.",
    "confidence": "critical",
    "reason": "Exposing API keys in the codebase can lead to unauthorized access.",
    "solution": "Use environment variables to store API keys instead of hardcoding them.",
    "actual_code": "\"api_key\": \"os.environ/AZURE_API_KEY\"",
    "fixed_code": "\"api_key\": \"${AZURE_API_KEY}\"",
    "file_name": "config.json",
    "start_line": 13,
    "end_line": 13,
    "side": "RIGHT",
    "sentiment": "negative",
    "severity_level": 9
  },
  {
    "topic": "Security",
    "comment": "Database connection strings should not be constructed using string interpolation.",
    "confidence": "critical",
    "reason": "Using string interpolation for connection strings can expose the application to SQL injection attacks.",
    "solution": "Use parameterized queries or a configuration management tool to handle sensitive information.",
    "actual_code": "self.engine = create_engine(\n    f\"postgresql://{os.environ['POSTGRES_USER']}:{os.environ['POSTGRES_PASSWORD']}@{os.environ['POSTGRES_HOST']}:{os.environ['POSTGRES_PORT']}/{os.environ['POSTGRES_DB']}\",\n    pool_size=10,\n    max_overflow=20,\n)",
    "fixed_code": "self.engine = create_engine(\n    'postgresql://{user}:{password}@{host}:{port}/{db}'.format(\n        user=os.environ['POSTGRES_USER'],\n        password=os.environ['POSTGRES_PASSWORD'],\n        host=os.environ['POSTGRES_HOST'],\n        port=os.environ['POSTGRES_PORT'],\n        db=os.environ['POSTGRES_DB']\n    ),\n    pool_size=10,\n    max_overflow=20,\n)",
    "file_name": "kaizen/retriever/llama_index_retriever.py",
    "start_line": 35,
    "end_line": 39,
    "side": "RIGHT",
    "sentiment": "negative",
    "severity_level": 9
  },
  {
    "topic": "SQL Injection",
    "comment": "Potential SQL injection vulnerability in the query construction.",
    "confidence": "critical",
    "reason": "Using f-strings to construct SQL queries can lead to SQL injection attacks if user input is not properly sanitized.",
    "solution": "Use parameterized queries to avoid SQL injection vulnerabilities.",
    "actual_code": "query = f\"\"\"\nSELECT \n    e.node_id,\n    e.text,\n    e.metadata,\n    1 - (e.embedding <=> %s::vector) as similarity\nFROM \n{self.table_name}e\nJOIN \n    function_abstractions fa ON e.node_id = fa.function_id::text\nJOIN \n    files f ON fa.file_id = f.file_id\nWHERE \n    f.repo_id = %s\nORDER BY \n    similarity DESC\nLIMIT \n    %s\n\"\"\"",
    "fixed_code": "query = \"\"\"\nSELECT \n    e.node_id,\n    e.text,\n    e.metadata,\n    1 - (e.embedding <=> %s::vector) as similarity\nFROM \n    %s e\nJOIN \n    function_abstractions fa ON e.node_id = fa.function_id::text\nJOIN \n    files f ON fa.file_id = f.file_id\nWHERE \n    f.repo_id = %s\nORDER BY \n    similarity DESC\nLIMIT \n    %s\n\"\"\"",
    "file_name": "kaizen/retriever/custom_vector_store.py",
    "start_line": 19,
    "end_line": 37,
    "side": "RIGHT",
    "sentiment": "negative",
    "severity_level": 9
  },
  {
    "topic": "Exception Handling",
    "comment": "Broad exception handling should be avoided.",
    "confidence": "critical",
    "reason": "Catching all exceptions can hide bugs and make debugging difficult.",
    "solution": "Catch specific exceptions instead of using a broad except clause.",
    "actual_code": "except Exception as e:",
    "fixed_code": "except ImportError as e:\n    logger.error(f\"Failed to import module:{str(e)}\")\n    raise\nexcept ValueError as e:\n    logger.error(f\"Invalid value:{str(e)}\")\n    raise",
    "file_name": "kaizen/retriever/tree_sitter_utils.py",
    "start_line": 28,
    "end_line": 30,
    "side": "RIGHT",
    "sentiment": "negative",
    "severity_level": 8
  },
  {
    "topic": "Configuration",
    "comment": "Changes made to sensitive file",
    "confidence": "critical",
    "reason": "Changes were made to config.json, which needs review",
    "solution": "NA",
    "fixed_code": "",
    "start_line": "4",
    "end_line": "4",
    "side": "RIGHT",
    "file_name": "config.json",
    "sentiment": "negative",
    "severity_level": 10
  },
  {
    "topic": "Docker",
    "comment": "Changes made to sensitive file",
    "confidence": "critical",
    "reason": "Changes were made to Dockerfile, which needs review",
    "solution": "NA",
    "fixed_code": "",
    "start_line": "4",
    "end_line": "4",
    "side": "RIGHT",
    "file_name": "Dockerfile",
    "sentiment": "negative",
    "severity_level": 10
  },
  {
    "topic": "Docker",
    "comment": "Changes made to sensitive file",
    "confidence": "critical",
    "reason": "Changes were made to docker-compose.yml, which needs review",
    "solution": "NA",
    "fixed_code": "",
    "start_line": "15",
    "end_line": "15",
    "side": "RIGHT",
    "file_name": "docker-compose.yml",
    "sentiment": "negative",
    "severity_level": 10
  },
  {
    "topic": "Version Control",
    "comment": "Changes made to sensitive file",
    "confidence": "critical",
    "reason": "Changes were made to .gitignore, which needs review",
    "solution": "NA",
    "fixed_code": "",
    "start_line": "164",
    "end_line": "164",
    "side": "RIGHT",
    "file_name": ".gitignore",
    "sentiment": "negative",
    "severity_level": 10
  },
  {
    "topic": "Database",
    "comment": "Changes made to sensitive file",
    "confidence": "critical",
    "reason": "Changes were made to db_setup/init.sql, which needs review",
    "solution": "NA",
    "fixed_code": "",
    "start_line": "1",
    "end_line": "1",
    "side": "RIGHT",
    "file_name": "db_setup/init.sql",
    "sentiment": "negative",
    "severity_level": 10
  }
]
{"/contact_us":{"title":"Contact Us","data":{"":"If you have any questions or need further assistance, please feel free to reach out to us at support@cloudcode.ai."}},"/contributing":{"title":"Contributing","data":{"":"We welcome contributions from the community! If you'd like to contribute to CloudCode, please follow these steps:","fork-the-repository#Fork the repository":"Visit the CloudCode repository on GitHub and click on the Fork button to create a copy of the repository under your own GitHub account.","create-a-new-branch#Create a new branch":"Navigate to your local copy of the CloudCode repository and create a new branch for your feature or fix:\ncheckout -b feature/my-feature\nReplace my-feature with a descriptive name for your feature or fix.","commit-your-changes#Commit your changes":"Make the necessary changes to the codebase and commit them:\ngit commit -m 'Add some feature'\nReplace Add some feature with a concise and meaningful commit message.","push-to-the-branch#Push to the branch":"git push origin feature/my-feature","open-a-pull-request#Open a pull request":"Go to the GitHub page of your forked repository. You should see a prompt to create a new pull request from your recently pushed branch.Select the base branch (usually main or master) of the original CloudCode repository.\nSelect your branch (feature/my-feature) as the compare branch.\nProvide a clear title and description for your pull request detailing the changes introduced.","collaborate-and-iterate#Collaborate and Iterate":"Your pull request will be reviewed by the maintainers of CloudCode. Be prepared to address any feedback or suggestions they may have. Collaborate on refining your changes until they are ready to be merged into the main repository.Thank you for contributing to CloudCode!"}},"/getting_started":{"title":"Getting Started","data":{"":"You can start using Cloud Code AI in two different ways:","cloud-hosted-solution-recommended#Cloud Hosted Solution (Recommended)":"Utilize our cloud-hosted, scalable application at https://beta.cloudcode.ai to quickly access and leverage Cloud Code AI's capabilities without setting up your own infrastructure. This option is ideal for immediate use and simplifies the deployment process.","self-hosted-deployment#Self-Hosted Deployment":"Deploy your own instance of the open-source Cloud Code project by following the installation instructions provided in our documentation. Follow the steps outlined in the installation guide to set up Cloud Code AI on your infrastructure.Choose the option that best fits your needs and start accelerating your software development with Cloud Code AI today!"}},"/":{"title":"Index","data":{"":"Welcome to the Kaizen documentation! This resource will guide you through utilizing Kaizen to enhance your software development journey â€” from code reviews and testing automation to ensuring the security and reliability of your applications.","about-kaizen#About Kaizen":"Kaizen is an open-source project that helps teams ensure quality in their software delivery by providing a suite of tools for code review, test generation, and end-to-end testing. It integrates with your existing code repositories and workflows, allowing you to streamline your software development process.","key-features#Key Features":"","end-to-end-testing#End-to-End Testing":"Kaizen generates comprehensive end-to-end tests based on your application's code and documentation. These tests ensure that your application functions correctly from start to finish, catching regressions and edge cases that may have been overlooked during development.","ui-testing-and-review#UI Testing and Review":"Kaizen can provide teams with helpful reviews for their UI and generate necessary tests to ensure that their website works as expected.","code-review#Code Review":"Kaizen automatically reviews pull requests, summarizes code changes and provides insightful feedback on potential issues or areas of improvement. It leverages advanced natural language processing techniques to understand the context and implications of the code changes."}},"/self_hosting_guide":{"title":"Self Hosting Guide","data":{"":"This guide outlines the steps to set up a self-hosted instance of CloudCode, which utilizes a GitHub App to perform various actions related to pull requests (PRs) and repository management.CloudCode allows you to run its API server locally or on your own infrastructure.","prerequisites#Prerequisites":"Before you begin, ensure you have the following prerequisites installed and configured on your system:\nGit: Version control system used to clone the CloudCode repository.\nPython: Required for using Poetry, a dependency manager used by CloudCode.\nDocker and Docker Compose: For deploying and managing containerized applications.\nGitHub Account: You'll need this to set up a GitHub App and configure permissions.","outline#Outline":"To create your own local version of CloudCode, follow along the guide to complete the following steps:\nClone the repository.\nInstall required dependencies.\nCreate a Github app.\nPrepare the configuration settings.\nDeploy the API."}},"/self_hosting_guide/clone_repository":{"title":"Clone Repository","data":{"":"Run the following command in your local machine:\ngit clone https://github.com/cloudcode/cloudcode.git\nThis command will clone the CloudCode repository from GitHub to your local machine."}},"/self_hosting_guide/deploy_api":{"title":"Deploy API","data":{"":"To deploy the CloudCode API using Docker Compose, follow these steps:\nMake sure you have Docker and Docker Compose installed on your system.\nNavigate to the CloudCode project directory:\ncd cloudcode\nRun the following command to start the API server and its dependencies using Docker Compose:\ndocker-compose up\nThis command will build and launch the Docker containers defined in the docker-compose.yml file. The API server for CloudCode will be deployed and accessible based on the configurations specified in the docker-compose.yml file.You can monitor the logs and access the API endpoints once the containers are up and running. Use Ctrl + C to stop the Docker Compose process when you're finished."}},"/self_hosting_guide/executing_tests":{"title":"Executing Tests","data":{"":"Once you have generated all the necessary tests, you can run all the tests in two ways:\nRun the following command to execute the tests.\n   PYTHONPATH=. poetry run python examples/basic/execute.py\nOR\nUse the default pytest module to execute all tests.\n    pytest -v .kaizen/tests/\nKaizen will generate all the tests and store them inside .kaizen/tests/"}},"/self_hosting_guide/generating_tests":{"title":"Generating Tests","data":{"":"Follow these steps to generate tests for your website.\nUpdate the URL in the file at examples/basic/generate.py - Line 5.\nRun the following command to generate tests.\n    PYTHONPATH=. poetry run python examples/basic/generate.py\nKaizen will generate all the tests and store them inside .kaizen/tests/"}},"/self_hosting_guide/install_dependencies":{"title":"Install Dependencies","data":{"":"To install dependencies for CloudCode, follow these steps:\nChange directory to the CloudCode project directory:\n   cd cloudcode\nUse Poetry to install the project dependencies:\n   poetry install\nThese commands will navigate you into the CloudCode project directory and then use Poetry to install the required dependencies specified in the project's pyproject.toml file."}},"/self_hosting_guide/prepare_configuration":{"title":"Prepare Configuration","data":{"":"To prepare for deployment, follow these steps to configure the necessary files:\nCopy Environment File:\nCreate a .env file by duplicating .env.example. This file will store environment variables required for the deployment process.\nStore GitHub App PEM File:\nEnsure the PEM file for the GitHub app is stored as GITHUB_APP_KEY.pem. This file is necessary for authentication and interaction with the GitHub platform during deployment.","configuring-features#Configuring Features":"You can adjust additional features by modifying the config.json file. This JSON file controls specific configurations related to the deployment process and application behavior.Make sure to update these files appropriately before proceeding with deployment."}},"/self_hosting_guide/setup_github_app":{"title":"Setup GitHub App","data":{"":"Follow these steps to set up your GitHub app:","registering-your-github-app#Registering Your GitHub App":"Access Developer Settings:\nClick on your profile photo in the upper-right corner of GitHub.\nGo to Settings and then click on Developer settings in the left sidebar.\nCreate a New GitHub App:\nUnder Developer settings, select GitHub Apps and click on New GitHub App.\nProvide App Details:\nEnter the following details for your app:\nGitHub App name: Choose a name for your app.\nHomepage URL: Specify the URL of your app (e.g., repository URL).\nWebhook URL: Enter the server URL where webhook requests will be sent.\nOptionally, set a Webhook secret for request validation.","configure-webhook-and-permissions#Configure Webhook and Permissions":"Activate Webhook:\nEnsure the \"Webhook\" toggle is set to Active.\nSet Permissions:\nIn the sidebar, navigate to Permissions & events.\nDefine Permissions:\nUnder Repository permissions, Organization permissions, and Account permissions, select required permissions such as:\nRepository Content\nPull Request\nMetadata\nCheck Runs","subscribe-to-events#Subscribe to Events":"Choose Events:\nUnder Subscribe to Events, select the webhook events your app needs to receive (e.g., \"Pull request\" events).\nBy following these steps, your GitHub app will be properly configured with the necessary permissions and event subscriptions for your project."}}}
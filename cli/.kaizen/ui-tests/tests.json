[{"id": 1, "module_title": "Page Title and Meta Description", "tests": [{"id": 1, "test_description": "Verify if the title is 'Cloud Code AI - An AI Co-Pilot for your Cloud resources!'", "test_name": "Verify Page Title", "repeat": true, "code": "```python\nimport pytest\nfrom playwright.sync_api import sync_playwright\n\ndef test_verify_title():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n        page.goto(\"https://cloudcode.ai\")\n        title = page.title()\n        assert title == \"Cloud Code AI - An AI Co-Pilot for your Cloud resources!\"\n        browser.close()\n\n# Run the test\npytest.main([__file__])\n```", "status": "Not run"}, {"id": 2, "test_description": "Verify if the meta description is present and contains relevant information about the application", "test_name": "Verify Meta Description", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_meta_description_presence_and_content():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        # Navigate to the URL\n        page.goto(\"https://cloudcode.ai\")\n\n        # Get the meta description content\n        meta_description = page.evaluate(\"\"\"() => {\n            const metaTag = document.querySelector('meta[name=\"description\"]');\n            return metaTag ? metaTag.content : null;\n        }\"\"\")\n\n        # Validate the presence and content of the meta description\n        assert meta_description is not None, \"Meta description is missing on the page\"\n        assert \"CloudCode AI\" in meta_description, \"Meta description does not contain relevant information\"\n\n        # Close the browser\n        browser.close()\n\ntest_meta_description_presence_and_content()\n```", "status": "Not run"}], "folder_name": "page_title_meta_description", "importance": "critical"}, {"id": 2, "module_title": "Navigation Menu", "tests": [{"id": 1, "test_description": "Click on each navigation menu item and verify if the respective section is scrolled into view or loaded", "test_name": "Verify Navigation Menu Items", "repeat": true, "code": "```python\nimport pytest\nfrom playwright.sync_api import sync_playwright\n\n@pytest.fixture\ndef browser():\n    # Open the browser\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        yield browser\n        browser.close()\n\ndef test_navigation_menu(browser):\n    page = browser.new_page()\n    page.goto(\"https://cloudcode.ai\")\n\n    # Click on each navigation menu item and verify if the respective section is scrolled into view or loaded\n    navigation_items = page.query_selector_all(\"header nav a\")\n    for item in navigation_items:\n        item.click()\n        section_id = item.get_attribute(\"href\")\n        section = page.query_selector(section_id)\n        assert section.is_visible()\n\n    # Close the page\n    page.close()\n```", "status": "Not run"}], "folder_name": "navigation_menu", "importance": "critical"}, {"id": 3, "module_title": "Hero Section", "tests": [{"id": 1, "test_description": "Verify if the 'Book a Demo' button is clickable and redirects to the correct section", "test_name": "Verify Book a Demo Button", "repeat": true, "code": "```python\nimport pytest\nfrom playwright.sync_api import sync_playwright\n\nclass TestCloudCodeAI:\n    @pytest.fixture(scope=\"function\")\n    def browser(self):\n        # Open a browser page in incognito mode\n        with sync_playwright() as p:\n            browser = p.chromium.launch()\n            context = browser.new_context(storage_state=None, accept_downloads=True)\n            page = context.new_page()\n            yield page\n            browser.close()\n\n    def test_book_demo_button_redirects_to_section(self, browser):\n        # Navigate to the Cloud Code AI website\n        browser.goto(\"https://cloudcode.ai\")\n\n        # Get the 'Book a Demo' button element\n        book_demo_button = browser.wait_for_selector(\"text=Book a Demo\")\n\n        # Assert that the 'Book a Demo' button is visible and enabled\n        assert book_demo_button.is_visible()\n        assert book_demo_button.is_enabled()\n\n        # Click the 'Book a Demo' button\n        book_demo_button.click()\n\n        # Wait for the navigation to complete\n        browser.wait_for_navigation()\n\n        # Assert that the URL has changed to the expected section\n        assert \"cta\" in browser.url\n\n        # Take a screenshot for visual verification\n        browser.screenshot(path=\"book_demo_button_click.png\")\n```", "status": "Not run"}, {"id": 2, "test_description": "Verify if the 'Join Waitlist' button is clickable and redirects to the correct section", "test_name": "Verify Join Waitlist Button", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_join_waitlist_button():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        page.goto(\"https://cloudcode.ai\")\n        join_waitlist_button = page.wait_for_selector(\"text=Join Waitlist\")\n        \n        assert join_waitlist_button.is_visible()\n        join_waitlist_button.click()\n\n        # Add assertions for the redirect to the correct section if applicable\n        # For example: \n        # assert \"https://cloudcode.ai#cta\" in page.url\n\n        context.close()\n        browser.close()\n```", "status": "Not run"}], "folder_name": "hero_section", "importance": "good_to_have"}, {"id": 4, "module_title": "AI QA Assistant Section", "tests": [{"id": 1, "test_description": "Verify if the content about 'AI QA Assistant' is visible and correctly positioned", "test_name": "Verify AI QA Assistant Content", "repeat": true, "code": "```python\n# Import the required libraries\nfrom playwright.sync_api import sync_playwright\n\n# Define the test function\ndef test_verify_ai_content():\n    with sync_playwright() as p:\n        # Open the browser and create a context\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        # Navigate to the URL\n        page.goto(\"https://cloudcode.ai\")\n\n        # Verify if the content about 'AI QA Assistant' is visible and correctly positioned\n        ai_content = page.locator('text=AI QA Assistant')\n        assert ai_content.is_visible()\n        assert ai_content.bounding_box[\"y\"] > 0  # Assuming y > 0 indicates correct position\n\n        # Close the browser\n        context.close()\n```", "status": "Not run"}], "folder_name": "ai_qa_assistant_section", "importance": "good_to_have"}, {"id": 5, "module_title": "Test Smarter, Build Better Section", "tests": [{"id": 1, "test_description": "Verify if the content about 'Test Smarter, Build Better' is visible and correctly positioned", "test_name": "Verify Test Smarter Content", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_verify_content_visibility_and_position():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n        page.goto(\"https://cloudcode.ai\")\n        text_visible = page.inner_text('h2:has-text(\"Test Smarter, Build Better\")')\n        rect = page.eval_on_selector('h2:has-text(\"Test Smarter, Build Better\")', '(e) => e.getBoundingClientRect()')\n        print(text_visible)\n        print(rect)\n        browser.close()\n\ntest_verify_content_visibility_and_position()\n```", "status": "Not run"}], "folder_name": "test_smarter_build_better_section", "importance": "good_to_have"}, {"id": 6, "module_title": "Smarter Code, Safer Software Section", "tests": [{"id": 1, "test_description": "Verify if the content about 'Smarter Code, Safer Software' is visible and correctly positioned", "test_name": "Verify Smarter Code Content", "repeat": true, "code": "```python\nimport pytest\nfrom playwright.sync_api import sync_playwright\n\ndef test_verify_content_visibility_and_position():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n        page.goto(\"https://cloudcode.ai\")\n        content_element = page.locator('text=Smarter Code, Safer Software')\n\n        assert content_element.is_visible()\n        assert content_element.bounding_box['x'] >= 0  # Adjust according to expected position\n        assert content_element.bounding_box['y'] >= 0  # Adjust according to expected position\n\n        browser.close()\n```", "status": "Not run"}], "folder_name": "smarter_code_safer_software_section", "importance": "good_to_have"}, {"id": 7, "module_title": "Join Waitlist Section", "tests": [{"id": 1, "test_description": "Verify if the 'Join Waitlist' form is functional and accepts valid email addresses", "test_name": "Verify Join Waitlist Form", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_join_waitlist():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        page.goto(\"https://cloudcode.ai\")\n        page.click(\"text=Join Waitlist\")\n        page.fill(\"input[name='email']\", \"test@example.com\")\n        page.click(\"button:has-text('Submit')\")\n\n        # Add assertions or further actions as needed\n        \n        page.screenshot(path=\"join_waitlist.png\")\n        \n        browser.close()\n```", "status": "Not run"}], "folder_name": "join_waitlist_section", "importance": "good_to_have"}, {"id": 8, "module_title": "Partner Logos Section", "tests": [{"id": 1, "test_description": "Verify if all partner logos are visible and displayed correctly", "test_name": "Verify Partner Logos", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_partner_logos_visibility():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        page.goto(\"https://cloudcode.ai\")\n        partner_logos = page.query_selector_all(\".flex.w-full.gap-x-4.items-center.justify-center > img\")\n\n        for logo in partner_logos:\n            assert logo.is_visible()\n            assert logo.bounding_box[\"width\"] > 0\n            assert logo.bounding_box[\"height\"] > 0\n\n        context.close()\n        browser.close()\n```", "status": "Not run"}], "folder_name": "partner_logos_section", "importance": "good_to_have"}, {"id": 9, "module_title": "Social Links Section", "tests": [{"id": 1, "test_description": "Verify if all social links are visible and functional", "test_name": "Verify Social Links", "repeat": true, "code": "```python\nfrom playwright.sync_api import sync_playwright\n\ndef test_social_links_are_visible_and_functional():\n    with sync_playwright() as p:\n        browser = p.chromium.launch()\n        context = browser.new_context()\n        page = context.new_page()\n\n        page.goto(\"https://cloudcode.ai\")\n        page.wait_for_load_state(\"networkidle\")\n\n        social_links = page.query_selector_all(\"img[alt='social_link']\")\n        for link in social_links:\n            assert link.is_visible()\n            link.click()\n            context.wait_for_page()\n            assert \"cloudcode.ai\" in context.url\n\n        browser.close()\n\ntest_social_links_are_visible_and_functional()\n```", "status": "Not run"}], "folder_name": "social_links_section", "importance": "good_to_have"}]